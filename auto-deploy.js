#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('๐ ุงููุดุฑ ุงูุชููุงุฆู ููุธุงู ุฅุฏุงุฑุฉ ุงูุตุงูุฉ ุงูุฑูุงุถูุฉ');
console.log('=' .repeat(60));

// Configuration
const config = {
  projectName: 'elbsndely-gym',
  backendName: 'elbsndely-gym-api',
  frontendName: 'elbsndely-gym-frontend',
  
  // URLs will be updated after deployment
  backendUrl: '',
  frontendUrl: '',
  
  // Git repository (update with your repo)
  gitRepo: 'https://github.com/your-username/elbsndely-gym.git'
};

// Helper functions
const runCommand = (command, cwd = process.cwd()) => {
  try {
    console.log(`๐ง ุชุดุบูู: ${command}`);
    const result = execSync(command, { 
      cwd, 
      stdio: 'inherit',
      encoding: 'utf8'
    });
    return result;
  } catch (error) {
    console.error(`โ ุฎุทุฃ ูู ุชุดุบูู: ${command}`);
    console.error(error.message);
    return null;
  }
};

const updateEnvFile = (filePath, updates) => {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    Object.entries(updates).forEach(([key, value]) => {
      const regex = new RegExp(`^${key}=.*$`, 'm');
      if (content.match(regex)) {
        content = content.replace(regex, `${key}=${value}`);
      } else {
        content += `\n${key}=${value}`;
      }
    });
    
    fs.writeFileSync(filePath, content);
    console.log(`โ ุชู ุชุญุฏูุซ ${filePath}`);
    return true;
  } catch (error) {
    console.log(`โ ุฎุทุฃ ูู ุชุญุฏูุซ ${filePath}:`, error.message);
    return false;
  }
};

const checkPrerequisites = () => {
  console.log('\n๐ ูุญุต ุงููุชุทูุจุงุช ุงูุฃุณุงุณูุฉ...');
  
  const requirements = [
    { name: 'Node.js', command: 'node --version' },
    { name: 'npm', command: 'npm --version' }
    // Git is optional for deployment
  ];
  
  let allGood = true;
  
  requirements.forEach(req => {
    try {
      const version = execSync(req.command, { encoding: 'utf8' }).trim();
      console.log(`โ ${req.name}: ${version}`);
    } catch (error) {
      console.log(`โ ${req.name}: ุบูุฑ ูุซุจุช`);
      allGood = false;
    }
  });
  
  return allGood;
};

const prepareForDeployment = () => {
  console.log('\n๐ฆ ุฅุนุฏุงุฏ ุงููููุงุช ูููุดุฑ...');
  
  // Update package.json files
  const backendPackagePath = 'backend/package.json';
  const frontendPackagePath = 'frontend/package.json';
  
  try {
    // Backend package.json
    const backendPackage = JSON.parse(fs.readFileSync(backendPackagePath, 'utf8'));
    backendPackage.engines = {
      "node": ">=18.0.0",
      "npm": ">=9.0.0"
    };
    backendPackage.scripts = {
      ...backendPackage.scripts,
      "start": "node server.js",
      "build": "echo 'No build step required'",
      "postinstall": "echo 'Backend ready for deployment'"
    };
    fs.writeFileSync(backendPackagePath, JSON.stringify(backendPackage, null, 2));
    console.log('โ ุชู ุชุญุฏูุซ backend/package.json');
    
    // Frontend package.json
    const frontendPackage = JSON.parse(fs.readFileSync(frontendPackagePath, 'utf8'));
    frontendPackage.engines = {
      "node": ">=18.0.0",
      "npm": ">=9.0.0"
    };
    fs.writeFileSync(frontendPackagePath, JSON.stringify(frontendPackage, null, 2));
    console.log('โ ุชู ุชุญุฏูุซ frontend/package.json');
    
  } catch (error) {
    console.log('โ ุฎุทุฃ ูู ุชุญุฏูุซ package.json files:', error.message);
    return false;
  }
  
  return true;
};

const createDeploymentInstructions = () => {
  const instructions = `# ๐ ุชุนูููุงุช ุงููุดุฑ ุงูุณุญุงุจู

## ุชู ุฅุนุฏุงุฏ ุงููุดุฑูุน ูููุดุฑ ุงูุณุญุงุจู ุจูุฌุงุญ!

### ุงูุฎุทูุฉ ุงูุชุงููุฉ: ุงููุดุฑ ุงููุฏูู

#### 1. ูุดุฑ Backend ุนูู Railway:
1. ุงุฐูุจ ุฅูู https://railway.app
2. ูู ุจุชุณุฌูู ุงูุฏุฎูู ุฃู ุฅูุดุงุก ุญุณุงุจ
3. ุงุถุบุท "New Project"
4. ุงุฎุชุฑ "Deploy from GitHub repo"
5. ุงุฎุชุฑ ูุฐุง ุงููุดุฑูุน ููุฌูุฏ backend
6. ุฃุถู ูุชุบูุฑุงุช ุงูุจูุฆุฉ:
   - NODE_ENV=production
   - JWT_SECRET=elbsndely_gym_super_secret_jwt_key_2024
   - DATABASE_URL=(ุณูุชู ุฅูุดุงุคูุง ุชููุงุฆูุงู)

#### 2. ูุดุฑ Frontend ุนูู Netlify:
1. ุงุฐูุจ ุฅูู https://netlify.com
2. ุงุถุบุท "New site from Git"
3. ุงุฎุชุฑ ูุฐุง ุงููุดุฑูุน ููุฌูุฏ frontend
4. Build command: \`npm run build\`
5. Publish directory: \`build\`
6. ุฃุถู ูุชุบูุฑ ุงูุจูุฆุฉ:
   - REACT_APP_API_URL=https://your-backend-url.railway.app/api

#### 3. ุจุนุฏ ุงููุดุฑ:
1. ุงุญุตู ุนูู Backend URL ูู Railway
2. ุงุญุตู ุนูู Frontend URL ูู Netlify
3. ุญุฏุซ REACT_APP_API_URL ูู Netlify
4. ุงุฎุชุจุฑ ุงููุธุงู ุจุงุณุชุฎุฏุงู:
   \`\`\`bash
   BACKEND_URL=https://your-backend-url.railway.app \\
   FRONTEND_URL=https://your-frontend-url.netlify.app \\
   node test-cloud-deployment.js
   \`\`\`

### ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู:
- ุงุณู ุงููุณุชุฎุฏู: admin
- ูููุฉ ุงููุฑูุฑ: admin123

### ุงููููุงุช ุงูููุนุฏุฉ ูููุดุฑ:
โ backend/Dockerfile
โ backend/railway.json
โ backend/vercel.json
โ frontend/netlify.toml
โ frontend/vercel.json
โ .env.production files
โ Updated package.json files

### ูููุณุงุนุฏุฉ:
ุฑุงุฌุน ููู DEPLOYMENT_GUIDE.md ููุชูุงุตูู ุงููุงููุฉ.
`;

  fs.writeFileSync('DEPLOYMENT_INSTRUCTIONS.md', instructions);
  console.log('โ ุชู ุฅูุดุงุก DEPLOYMENT_INSTRUCTIONS.md');
};

const createProductionReadyFiles = () => {
  console.log('\n๐ ุฅูุดุงุก ูููุงุช ุงูุฅูุชุงุฌ...');
  
  // Create .gitignore if not exists
  const gitignoreContent = `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
build/
dist/

# Environment variables
.env.local
.env.development.local
.env.test.local
.env.production.local

# Database
*.sqlite
database.sqlite

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo

# Temporary files
tmp/
temp/
`;

  if (!fs.existsSync('.gitignore')) {
    fs.writeFileSync('.gitignore', gitignoreContent);
    console.log('โ ุชู ุฅูุดุงุก .gitignore');
  }
  
  // Create Procfile for Heroku (alternative)
  const procfileContent = 'web: cd backend && npm start';
  fs.writeFileSync('Procfile', procfileContent);
  console.log('โ ุชู ุฅูุดุงุก Procfile');
  
  return true;
};

const runTests = () => {
  console.log('\n๐งช ุชุดุบูู ุงูุงุฎุชุจุงุฑุงุช...');
  
  // Test backend
  console.log('ุงุฎุชุจุงุฑ Backend...');
  const backendTest = runCommand('npm test --if-present', 'backend');
  
  // Test frontend
  console.log('ุงุฎุชุจุงุฑ Frontend...');
  const frontendTest = runCommand('npm test -- --watchAll=false --if-present', 'frontend');
  
  return true; // Continue even if tests fail
};

const main = async () => {
  try {
    // Check prerequisites
    if (!checkPrerequisites()) {
      console.log('\nโ ูุฑุฌู ุชุซุจูุช ุงููุชุทูุจุงุช ุงูุฃุณุงุณูุฉ ุฃููุงู');
      process.exit(1);
    }
    
    // Prepare files
    if (!prepareForDeployment()) {
      console.log('\nโ ูุดู ูู ุฅุนุฏุงุฏ ุงููููุงุช');
      process.exit(1);
    }
    
    // Create production files
    createProductionReadyFiles();
    
    // Run tests
    runTests();
    
    // Create deployment instructions
    createDeploymentInstructions();
    
    // Final summary
    console.log('\n' + '=' .repeat(60));
    console.log('๐ ุชู ุฅุนุฏุงุฏ ุงููุดุฑูุน ูููุดุฑ ุงูุณุญุงุจู ุจูุฌุงุญ!');
    console.log('=' .repeat(60));
    
    console.log('\n๐ ููุฎุต ูุง ุชู ุฅูุฌุงุฒู:');
    console.log('โ ูุญุต ุงููุชุทูุจุงุช ุงูุฃุณุงุณูุฉ');
    console.log('โ ุชุญุฏูุซ ูููุงุช package.json');
    console.log('โ ุฅูุดุงุก ูููุงุช ุงููุดุฑ (Dockerfile, netlify.toml, etc.)');
    console.log('โ ุฅุนุฏุงุฏ ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
    console.log('โ ุฅูุดุงุก ูููุงุช ุงูุฅูุชุงุฌ');
    console.log('โ ุชุดุบูู ุงูุงุฎุชุจุงุฑุงุช');
    console.log('โ ุฅูุดุงุก ุชุนูููุงุช ุงููุดุฑ');
    
    console.log('\n๐ ุงูุฎุทูุงุช ุงูุชุงููุฉ:');
    console.log('1. ุฑุงุฌุน ููู DEPLOYMENT_INSTRUCTIONS.md');
    console.log('2. ูู ุจูุดุฑ Backend ุนูู Railway ุฃู Heroku');
    console.log('3. ูู ุจูุดุฑ Frontend ุนูู Netlify ุฃู Vercel');
    console.log('4. ุญุฏุซ URLs ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
    console.log('5. ุงุฎุชุจุฑ ุงููุธุงู ุจุงุณุชุฎุฏุงู test-cloud-deployment.js');
    
    console.log('\n๐ ุจุนุฏ ุงููุดุฑ ุณุชุญุตู ุนูู:');
    console.log('- ูุธุงู ูุชุงุญ 24/7 ุนุจุฑ ุงูุฅูุชุฑูุช');
    console.log('- ูุตูู ูู ุฃู ุฌูุงุฒ ููุชุตูุญ');
    console.log('- ูุงุนุฏุฉ ุจูุงูุงุช ุณุญุงุจูุฉ ุขููุฉ');
    console.log('- ูุณุฎ ุงุญุชูุงุทูุฉ ุชููุงุฆูุฉ');
    console.log('- ุฃุฏุงุก ุนุงูู ูุณุฑุนุฉ ุงุณุชุฌุงุจุฉ');
    
    console.log('\n๐ ูููุณุงุนุฏุฉ:');
    console.log('- ุฑุงุฌุน DEPLOYMENT_GUIDE.md ููุชูุงุตูู');
    console.log('- ุฑุงุฌุน USER_GUIDE.md ูุทุฑููุฉ ุงูุงุณุชุฎุฏุงู');
    console.log('- ุฑุงุฌุน README_CLOUD.md ูููุนูููุงุช ุงูุดุงููุฉ');
    
  } catch (error) {
    console.error('\nโ ุฎุทุฃ ูู ุนูููุฉ ุงูุฅุนุฏุงุฏ:', error.message);
    process.exit(1);
  }
};

// Run the deployment preparation
main();
