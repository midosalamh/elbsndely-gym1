const twilio = require('twilio');
require('dotenv').config();

// Initialize Twilio client only if credentials are provided
let client = null;
if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN &&
    process.env.TWILIO_ACCOUNT_SID.startsWith('AC')) {
  try {
    client = twilio(
      process.env.TWILIO_ACCOUNT_SID,
      process.env.TWILIO_AUTH_TOKEN
    );
    console.log('‚úÖ Twilio client initialized successfully');
  } catch (error) {
    console.warn('‚ö†Ô∏è Twilio initialization failed:', error.message);
  }
} else {
  console.warn('‚ö†Ô∏è Twilio credentials not configured properly. WhatsApp features will be disabled.');
}

const WHATSAPP_NUMBER = process.env.TWILIO_WHATSAPP_NUMBER || 'whatsapp:+14155238886';

/**
 * Send WhatsApp message to a single recipient
 * @param {string} to - Recipient phone number (with country code)
 * @param {string} message - Message content
 * @returns {Object} - Result object with success status and message ID or error
 */
const sendWhatsAppMessage = async (to, message) => {
  try {
    // Check if Twilio client is available
    if (!client) {
      console.warn('‚ö†Ô∏è Twilio client not available. Simulating message send.');
      return {
        success: true,
        messageId: `sim_${Date.now()}`,
        status: 'sent',
        simulated: true
      };
    }

    // Format phone number for WhatsApp
    const formattedNumber = to.startsWith('whatsapp:') ? to : `whatsapp:${to}`;

    const result = await client.messages.create({
      from: WHATSAPP_NUMBER,
      to: formattedNumber,
      body: message
    });

    console.log(`WhatsApp message sent successfully: ${result.sid}`);

    return {
      success: true,
      messageId: result.sid,
      status: result.status
    };
  } catch (error) {
    console.error('WhatsApp send error:', error);

    return {
      success: false,
      error: error.message,
      code: error.code
    };
  }
};

/**
 * Send WhatsApp messages to multiple recipients
 * @param {Array} recipients - Array of {phone, message} objects
 * @returns {Array} - Array of result objects
 */
const sendBulkMessages = async (recipients) => {
  const results = [];
  
  for (const recipient of recipients) {
    const result = await sendWhatsAppMessage(recipient.phone, recipient.message);
    results.push({
      phone: recipient.phone,
      ...result
    });
    
    // Add delay between messages to avoid rate limiting
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  return results;
};

/**
 * Send renewal reminder message
 * @param {Object} member - Member object
 * @param {Object} subscription - Subscription object
 * @returns {Object} - Result object
 */
const sendRenewalReminder = async (member, subscription) => {
  const message = `
ŸÖÿ±ÿ≠ÿ®ÿßŸã ${member.full_name}! üëã

ŸÜÿ∞ŸÉÿ±ŸÉ ÿ®ÿ£ŸÜ ÿßÿ¥ÿ™ÿ±ÿßŸÉŸÉ ŸÅŸä ÿµÿßŸÑÿ© ÿßŸÑÿ®ÿ≥ŸÜÿØŸäŸÑŸä ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿ© ÿ≥ŸäŸÜÿ™ŸáŸä ŸÅŸä ${subscription.end_date}.

üìã ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ:
‚Ä¢ ÿßŸÑŸÜŸàÿπ: ${subscription.subscription_type.name}
‚Ä¢ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßŸÜÿ™Ÿáÿßÿ°: ${subscription.end_date}
‚Ä¢ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ŸÑŸÑÿ™ÿ¨ÿØŸäÿØ: ${subscription.subscription_type.price} ÿ±ŸäÿßŸÑ

üí≥ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:
‚Ä¢ ŸÜŸÇÿØÿßŸã ŸÅŸä ÿßŸÑÿµÿßŸÑÿ©
‚Ä¢ ÿ™ÿ≠ŸàŸäŸÑ ÿ®ŸÜŸÉŸä
‚Ä¢ ÿ®ÿ∑ÿßŸÇÿ© ÿßÿ¶ÿ™ŸÖÿßŸÜŸäÿ©

ŸÑÿß ÿ™ŸÅŸàÿ™ ÿßŸÑŸÅÿ±ÿµÿ© Ÿàÿ¨ÿØÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉŸÉ ÿßŸÑŸäŸàŸÖ! üí™

ŸÑŸÑÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±: ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß ÿπŸÑŸâ ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸÖŸàÿ≠ÿØ
ÿ£Ÿà ŸÇŸÖ ÿ®ÿ≤Ÿäÿßÿ±ÿ© ÿßŸÑÿµÿßŸÑÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ©.

ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÉ ŸàŸÜÿ™ÿ∑ŸÑÿπ ŸÑÿ±ÿ§Ÿäÿ™ŸÉ ŸÇÿ±Ÿäÿ®ÿßŸã! üèãÔ∏è‚Äç‚ôÇÔ∏è
  `.trim();

  return await sendWhatsAppMessage(member.whatsapp_number || member.phone, message);
};

/**
 * Send motivational message
 * @param {string} phone - Recipient phone number
 * @param {string} name - Recipient name
 * @param {string} motivationalText - Custom motivational text (optional)
 * @returns {Object} - Result object
 */
const sendMotivationalMessage = async (phone, name, motivationalText = null) => {
  const motivationalMessages = [
    'ŸÑÿß ÿ™ÿ≥ÿ™ÿ≥ŸÑŸÖ ÿ£ÿ®ÿØÿßŸã! ŸÉŸÑ ÿ™ŸÖÿ±ŸäŸÜ ŸäŸÇÿ±ÿ®ŸÉ ÿÆÿ∑Ÿàÿ© ŸÖŸÜ ŸáÿØŸÅŸÉ. ÿßÿ≥ÿ™ŸÖÿ± Ÿàÿ≥ÿ™ÿ≠ŸÇŸÇ ŸÖÿß ÿ™ÿ±ŸäÿØ! üí™',
    'ÿßŸÑŸÜÿ¨ÿßÿ≠ ŸÑÿß Ÿäÿ£ÿ™Ÿä ŸÖŸÜ ÿßŸÑÿ±ÿßÿ≠ÿ©ÿå ÿ®ŸÑ ŸÖŸÜ ÿßŸÑÿ™ÿ≠ÿØŸä ŸàÿßŸÑŸÖÿ´ÿßÿ®ÿ±ÿ©. ÿßÿ¨ÿπŸÑ ÿßŸÑŸäŸàŸÖ ÿ£ŸÅÿ∂ŸÑ ŸÖŸÜ ÿßŸÑÿ£ŸÖÿ≥! üî•',
    'ÿ¨ÿ≥ŸÖŸÉ Ÿäÿ≥ÿ™ÿ∑Ÿäÿπ ÿ™ÿ≠ŸÖŸÑ ÿßŸÑŸÉÿ´Ÿäÿ±ÿå ÿπŸÇŸÑŸÉ ŸáŸà ÿßŸÑÿ∞Ÿä Ÿäÿ≠ÿ™ÿßÿ¨ ŸÑŸÑÿ•ŸÇŸÜÿßÿπ. ÿ™ÿ≠ÿØŸâ ŸÜŸÅÿ≥ŸÉ ÿßŸÑŸäŸàŸÖ! üèÜ',
    'ŸÉŸÑ ŸäŸàŸÖ ÿ™ÿ™ÿØÿ±ÿ® ŸÅŸäŸá ŸáŸà ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ± ŸÅŸä ÿµÿ≠ÿ™ŸÉ ŸàŸÖÿ≥ÿ™ŸÇÿ®ŸÑŸÉ. ÿßÿ≥ÿ™ŸÖÿ± ŸÅŸä ÿßŸÑÿ®ŸÜÿßÿ°! üèóÔ∏è',
    'ÿßŸÑÿ£ŸÑŸÖ ŸÖÿ§ŸÇÿ™ÿå ŸÑŸÉŸÜ ÿßŸÑŸÅÿÆÿ± ÿ®ŸÖÿß ÿ≠ŸÇŸÇÿ™Ÿá ŸäÿØŸàŸÖ ŸÑŸÑÿ£ÿ®ÿØ. ŸÑÿß ÿ™ÿ™ŸàŸÇŸÅ! ‚ö°',
    'ÿ£ŸÜÿ™ ÿ£ŸÇŸàŸâ ŸÖŸÖÿß ÿ™ÿπÿ™ŸÇÿØ Ÿàÿ£ŸÇÿ±ÿ® ŸÑŸáÿØŸÅŸÉ ŸÖŸÖÿß ÿ™ÿ™ÿÆŸäŸÑ. ŸàÿßÿµŸÑ ÿßŸÑŸÖÿ≥Ÿäÿ±! üéØ'
  ];

  const randomMessage = motivationalText || motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];
  
  const message = `
ŸÖÿ±ÿ≠ÿ®ÿßŸã ${name}! üåü

${randomMessage}

ÿ™ÿ∞ŸÉÿ± ÿ£ŸÜ ŸÉŸÑ ÿÆÿ∑Ÿàÿ© ÿ™ÿÆÿ∑ŸàŸáÿß ŸÅŸä ÿßŸÑÿµÿßŸÑÿ© ÿ™ŸÇÿ±ÿ®ŸÉ ŸÖŸÜ ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑÿ£ŸÅÿ∂ŸÑ ŸÖŸÜ ŸÜŸÅÿ≥ŸÉ.

ŸÜÿ≠ŸÜ ŸÅÿÆŸàÿ±ŸàŸÜ ÿ®ŸÉ ŸàŸÜÿ§ŸÖŸÜ ÿ®ŸÇÿØÿ±ÿ™ŸÉ ÿπŸÑŸâ ÿ™ÿ≠ŸÇŸäŸÇ ÿ£ŸáÿØÿßŸÅŸÉ! üíØ

ŸÅÿ±ŸäŸÇ ÿßŸÑÿ®ÿ≥ŸÜÿØŸäŸÑŸä ÿ¨ŸäŸÖ üèãÔ∏è‚Äç‚ôÇÔ∏è
  `.trim();

  return await sendWhatsAppMessage(phone, message);
};

/**
 * Send welcome message to new member
 * @param {Object} member - Member object
 * @returns {Object} - Result object
 */
const sendWelcomeMessage = async (member) => {
  const message = `
ŸÖÿ±ÿ≠ÿ®ÿßŸã ${member.full_name}! üéâ

ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã ÿ®ŸÉ ŸÅŸä ÿπÿßÿ¶ŸÑÿ© ÿßŸÑÿ®ÿ≥ŸÜÿØŸäŸÑŸä ÿ¨ŸäŸÖ! 

ŸÜÿ≠ŸÜ ÿ≥ÿπÿØÿßÿ° ŸÑÿßŸÜÿ∂ŸÖÿßŸÖŸÉ ÿ•ŸÑŸäŸÜÿß ŸàŸÜÿ™ÿ∑ŸÑÿπ ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ÿ™ÿ≠ŸÇŸäŸÇ ÿ£ŸáÿØÿßŸÅŸÉ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿ©.

üìç ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÖŸáŸÖÿ©:
‚Ä¢ ÿ±ŸÇŸÖ ÿßŸÑÿπÿ∂ŸàŸäÿ©: ${member.member_number}
‚Ä¢ ÿ≥ÿßÿπÿßÿ™ ÿßŸÑÿπŸÖŸÑ: ŸÖŸÜ 6 ÿµÿ®ÿßÿ≠ÿßŸã ÿ≠ÿ™Ÿâ 12 ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ
‚Ä¢ ÿÆÿØŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°: ŸÖÿ™ÿßÿ≠ÿ© ÿ∑ŸàÿßŸÑ ÿ£ŸàŸÇÿßÿ™ ÿßŸÑÿπŸÖŸÑ

üí° ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑÿ®ÿØÿßŸäÿ©:
‚Ä¢ ÿßÿ≠ÿ∂ÿ± ŸÖŸÑÿßÿ®ÿ≥ ÿ±Ÿäÿßÿ∂Ÿäÿ© ŸÖÿ±Ÿäÿ≠ÿ©
‚Ä¢ ŸÑÿß ÿ™ŸÜÿ≥ ÿ≤ÿ¨ÿßÿ¨ÿ© ÿßŸÑŸÖÿßÿ°
‚Ä¢ ÿßÿ®ÿØÿ£ ÿ®ÿ™ŸÖÿßÿ±ŸäŸÜ ÿßŸÑÿ•ÿ≠ŸÖÿßÿ° ÿØÿßÿ¶ŸÖÿßŸã

ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸàŸÜÿ™ŸÖŸÜŸâ ŸÑŸÉ ÿ±ÿ≠ŸÑÿ© ÿ±Ÿäÿßÿ∂Ÿäÿ© ŸÖŸÖÿ™ÿπÿ©! üí™

ŸÅÿ±ŸäŸÇ ÿßŸÑÿ®ÿ≥ŸÜÿØŸäŸÑŸä ÿ¨ŸäŸÖ üèãÔ∏è‚Äç‚ôÇÔ∏è
  `.trim();

  return await sendWhatsAppMessage(member.whatsapp_number || member.phone, message);
};

/**
 * Send promotional message
 * @param {string} phone - Recipient phone number
 * @param {string} name - Recipient name
 * @param {Object} offer - Offer details
 * @returns {Object} - Result object
 */
const sendPromotionalMessage = async (phone, name, offer) => {
  const message = `
ŸÖÿ±ÿ≠ÿ®ÿßŸã ${name}! üéÅ

ŸÑÿØŸäŸÉ ÿπÿ±ÿ∂ ÿÆÿßÿµ ŸÖŸÜ ÿßŸÑÿ®ÿ≥ŸÜÿØŸäŸÑŸä ÿ¨ŸäŸÖ!

üî• ${offer.title}
${offer.description}

‚è∞ ÿßŸÑÿπÿ±ÿ∂ ÿ≥ÿßÿ±Ÿä ÿ≠ÿ™Ÿâ: ${offer.expiry_date}
üí∞ ŸÇŸäŸÖÿ© ÿßŸÑÿÆÿµŸÖ: ${offer.discount}%

ŸÑÿß ÿ™ŸÅŸàÿ™ Ÿáÿ∞Ÿá ÿßŸÑŸÅÿ±ÿµÿ© ÿßŸÑÿ∞Ÿáÿ®Ÿäÿ©! 
ÿ≥ÿßÿ±ÿπ ÿ®ÿßŸÑÿ≠ÿ¨ÿ≤ ÿ£Ÿà ÿ≤Ÿäÿßÿ±ÿ© ÿßŸÑÿµÿßŸÑÿ© ŸÑŸÑÿßÿ≥ÿ™ŸÅÿßÿØÿ© ŸÖŸÜ ÿßŸÑÿπÿ±ÿ∂.

ŸÑŸÑÿ≠ÿ¨ÿ≤ ÿ£Ÿà ÿßŸÑÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±: ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß ÿßŸÑÿ¢ŸÜ! üìû

ŸÅÿ±ŸäŸÇ ÿßŸÑÿ®ÿ≥ŸÜÿØŸäŸÑŸä ÿ¨ŸäŸÖ üèãÔ∏è‚Äç‚ôÇÔ∏è
  `.trim();

  return await sendWhatsAppMessage(phone, message);
};

/**
 * Check message delivery status
 * @param {string} messageId - Twilio message SID
 * @returns {Object} - Status object
 */
const checkMessageStatus = async (messageId) => {
  try {
    // Check if Twilio client is available
    if (!client) {
      console.warn('‚ö†Ô∏è Twilio client not available. Simulating status check.');
      return {
        success: true,
        status: 'delivered',
        simulated: true
      };
    }

    const message = await client.messages(messageId).fetch();

    return {
      success: true,
      status: message.status,
      errorCode: message.errorCode,
      errorMessage: message.errorMessage
    };
  } catch (error) {
    console.error('Status check error:', error);

    return {
      success: false,
      error: error.message
    };
  }
};

module.exports = {
  sendWhatsAppMessage,
  sendBulkMessages,
  sendRenewalReminder,
  sendMotivationalMessage,
  sendWelcomeMessage,
  sendPromotionalMessage,
  checkMessageStatus
};
